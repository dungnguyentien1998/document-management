{"ast":null,"code":"import { Subject, of } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AppService {\n  constructor(http) {\n    this.http = http;\n    this.userLoggedIn = new Subject();\n    this.loginUrl = 'http://localhost:3000/api/v1/auth/signin';\n    this.signupUrl = '/api/signup';\n    this.userLoggedIn.next(false);\n  }\n  setUserLoggedIn(userLoggedIn) {\n    this.userLoggedIn.next(userLoggedIn);\n  }\n  getUserLoggedIn() {\n    return this.userLoggedIn.asObservable();\n  }\n  login(user) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    console.log(\"user: \", typeof user, \" \", user);\n    const options = {\n      headers\n    };\n    return this.http.post(this.loginUrl, {\n      \"email\": user.email,\n      \"password\": user.password\n    }, options).pipe(map(response => response), catchError(err => {\n      console.log(err);\n      return of([]);\n    }));\n  }\n  signup(user) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const options = {\n      headers\n    };\n    return this.http.post(this.signupUrl, {\n      user\n    }, options).pipe(map(response => response), catchError(err => {\n      console.log(err);\n      return of([]);\n    }));\n  }\n}\nAppService.ɵfac = function AppService_Factory(t) {\n  return new (t || AppService)(i0.ɵɵinject(i1.HttpClient));\n};\nAppService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppService,\n  factory: AppService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,OAAO,EAAcC,EAAE,QAAQ,MAAM;AAC9C,SAAqBC,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;;;AAKhD,OAAM,MAAOC,UAAU;EAMrBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,iBAAY,GAAG,IAAIP,OAAO,EAAW;IAC7C,aAAQ,GAAG,0CAA0C;IACrD,cAAS,GAAG,aAAa;IAGvB,IAAI,CAACQ,YAAY,CAACC,IAAI,CAAC,KAAK,CAAC;EAC/B;EAEAC,eAAe,CAACF,YAAqB;IACnC,IAAI,CAACA,YAAY,CAACC,IAAI,CAACD,YAAY,CAAC;EACtC;EAEAG,eAAe;IACb,OAAO,IAAI,CAACH,YAAY,CAACI,YAAY,EAAE;EACzC;EAEAC,KAAK,CAACC,IAAS;IACb,MAAMC,OAAO,GAAG,IAAIb,WAAW,CAAC;MAAC,cAAc,EAAG;IAAkB,CAAC,CAAC;IACtEc,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAE,OAAOH,IAAI,EAAE,GAAG,EAAEA,IAAI,CAAC;IAE7C,MAAMI,OAAO,GAAG;MAACH;IAAO,CAAC;IACzB,OAAO,IAAI,CAACR,IAAI,CAACY,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAG;MAAC,OAAO,EAAGN,IAAI,CAACO,KAAK;MAAE,UAAU,EAAEP,IAAI,CAACQ;IAAQ,CAAC,EAAEJ,OAAO,CAAC,CAACK,IAAI,CACpGpB,GAAG,CAAEqB,QAAgB,IAAKA,QAAQ,CAAC,EACnCpB,UAAU,CAACqB,GAAG,IAAG;MACfT,OAAO,CAACC,GAAG,CAACQ,GAAG,CAAC;MAChB,OAAOxB,EAAE,CAAC,EAAE,CAAC;IACf,CAAC,CAAC,CACL;EACD;EAEAyB,MAAM,CAACZ,IAAS;IACd,MAAMC,OAAO,GAAG,IAAIb,WAAW,CAAC;MAAC,cAAc,EAAG;IAAkB,CAAC,CAAC;IACtE,MAAMgB,OAAO,GAAG;MAACH;IAAO,CAAC;IACzB,OAAO,IAAI,CAACR,IAAI,CAACY,IAAI,CAAC,IAAI,CAACQ,SAAS,EAAG;MAACb;IAAI,CAAC,EAAEI,OAAO,CAAC,CAACK,IAAI,CAC1DpB,GAAG,CAAEqB,QAAgB,IAAKA,QAAQ,CAAC,EACnCpB,UAAU,CAACqB,GAAG,IAAG;MACfT,OAAO,CAACC,GAAG,CAACQ,GAAG,CAAC;MAChB,OAAOxB,EAAE,CAAC,EAAE,CAAC;IACf,CAAC,CAAC,CACJ;EACF;;AA1CWI,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAuB,SAAVvB,UAAU;EAAAwB,YAFT;AAAM","names":["Subject","of","HttpHeaders","map","catchError","AppService","constructor","http","userLoggedIn","next","setUserLoggedIn","getUserLoggedIn","asObservable","login","user","headers","console","log","options","post","loginUrl","email","password","pipe","response","err","signup","signupUrl","factory","providedIn"],"sourceRoot":"","sources":["/Users/tiendung1998/Documents/Angular/document-management/src/app/_services/app.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject, Observable, of } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { map, catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppService {\n\n  private userLoggedIn = new Subject<boolean>();\n  loginUrl = 'http://localhost:3000/api/v1/auth/signin';\n  signupUrl = '/api/signup';\n\n  constructor(private http: HttpClient) {\n    this.userLoggedIn.next(false);\n  }\n\n  setUserLoggedIn(userLoggedIn: boolean) {\n    this.userLoggedIn.next(userLoggedIn);\n  }\n\n  getUserLoggedIn(): Observable<boolean> {\n    return this.userLoggedIn.asObservable();\n  }\n\n  login(user: any) {\n    const headers = new HttpHeaders({'Content-Type' : 'application/json'});\n    console.log(\"user: \", typeof user, \" \", user);\n\n    const options = {headers};\n    return this.http.post(this.loginUrl,  {\"email\" : user.email, \"password\": user.password}, options).pipe(\n      map((response: Object) => response),\n      catchError(err => {\n        console.log(err);\n        return of([]);\n      })\n  );\n  }\n\n  signup(user: any) {\n    const headers = new HttpHeaders({'Content-Type' : 'application/json'});\n    const options = {headers};\n    return this.http.post(this.signupUrl,  {user}, options).pipe(\n      map((response: Object) => response),\n      catchError(err => {\n        console.log(err);\n        return of([]);\n      })\n   );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}