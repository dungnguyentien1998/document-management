{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport * as todoActions from '../actions';\nimport * as _ from 'lodash';\nimport * as storage from '../state/storage';\nexport const initialState = {\n  logs: storage.getItem('todo').logs,\n  currentLog: {},\n  deleteLogId: '',\n  result: '',\n  isLoading: false,\n  isLoadingSuccess: false,\n  isLoadingFailure: false\n};\nconst todoReducer = createReducer(initialState,\n// Gelogs\non(todoActions.getLogs, state => ({\n  ...state,\n  isLoading: true\n})), on(todoActions.getLogsSuccess, (state, result) => ({\n  logs: result.response,\n  isLoading: false,\n  isLoadingSuccess: true\n})),\n// Create Log Reducers\non(todoActions.createLog, (state, {\n  log\n}) => ({\n  ...state,\n  isLoading: true,\n  currentLog: log\n})), on(todoActions.createLogSuccess, (state, result) => {\n  const logs = undefined !== state.logs ? _.cloneDeep(state.logs) : [];\n  const currentLog = undefined !== state.currentLog ? _.cloneDeep(state.currentLog) : {};\n  currentLog.id = result.logId;\n  logs.push(currentLog);\n  return {\n    logs,\n    isLoading: false,\n    isLoadingSuccess: true\n  };\n}),\n// Delete Log Reducers\non(todoActions.deleteLog, (state, {\n  logid\n}) => ({\n  ...state,\n  isLoading: true,\n  deleteLogId: logid\n})), on(todoActions.deleteLogSuccess, (state, result) => {\n  let logs = undefined !== state.logs ? _.cloneDeep(state.logs) : [];\n  if (result.status) {\n    logs = logs.filter(log => log.id !== state.deleteLogId);\n  }\n  return {\n    logs,\n    isLoading: false,\n    isLoadingSuccess: true\n  };\n}),\n// Edit Log Reducers\non(todoActions.editLog, (state, {\n  log\n}) => ({\n  ...state,\n  isLoading: true,\n  currentLog: log\n})), on(todoActions.editLogSuccess, (state, result) => {\n  let logs = undefined !== state.logs ? _.cloneDeep(state.logs) : [];\n  const currentLog = undefined !== state.currentLog ? _.cloneDeep(state.currentLog) : {};\n  logs = logs.map(tsk => {\n    if (tsk.id === currentLog.id) {\n      tsk = currentLog;\n    }\n    return tsk;\n  });\n  return {\n    logs,\n    isLoading: false,\n    isLoadingSuccess: true\n  };\n}));\nexport function reducer(state, action) {\n  return todoReducer(state, action);\n}\nexport const getLogs = state => {\n  return {\n    logs: state.logs,\n    isLoading: state.isLoading,\n    isLoadingSuccess: state.isLoadingSuccess\n  };\n};","map":{"version":3,"mappings":"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","names":["createReducer","on","todoActions","_","storage","initialState","logs","getItem","currentLog","deleteLogId","result","isLoading","isLoadingSuccess","isLoadingFailure","todoReducer","getLogs","state","getLogsSuccess","response","createLog","log","createLogSuccess","undefined","cloneDeep","id","logId","push","deleteLog","logid","deleteLogSuccess","status","filter","editLog","editLogSuccess","map","tsk","reducer","action"],"sourceRoot":"","sources":["/Users/tiendung1998/Documents/Angular/document-management/src/app/app-state/reducers/log.reducer.ts"],"sourcesContent":["import { Action, createReducer, on } from '@ngrx/store';\nimport { Log } from '../entity';\nimport * as todoActions from '../actions';\nimport * as _ from 'lodash'\nimport * as storage from '../state/storage';\n\nexport interface State {\n  logs?: Log[];\n  currentLog?: Log;\n  deleteLogId?: any;\n  result?: any;\n  isLoading?: boolean;\n  isLoadingSuccess?: boolean;\n  isLoadingFailure?: boolean;\n}\n\nexport const initialState: State = {\n  logs: storage.getItem('todo').logs,\n  currentLog: {},\n  deleteLogId: '',\n  result: '',\n  isLoading: false,\n  isLoadingSuccess: false,\n  isLoadingFailure: false\n};\n\nconst todoReducer = createReducer(\n  initialState,\n\n  // Gelogs\n  on(todoActions.getLogs, (state) => ({...state, isLoading: true})),\n  on(todoActions.getLogsSuccess, (state, result) => ({logs: result.response, isLoading: false, isLoadingSuccess: true})),\n\n  // Create Log Reducers\n  on(todoActions.createLog, (state, {log}) => ({...state, isLoading: true, currentLog: log})),\n  on(todoActions.createLogSuccess, (state, result) => {\n    const logs = undefined !== state.logs ? _.cloneDeep(state.logs) : [];\n    const currentLog = undefined !== state.currentLog ? _.cloneDeep(state.currentLog) : {};\n    currentLog.id = result.logId;\n    logs.push(currentLog);\n    return {\n      logs,\n      isLoading: false,\n      isLoadingSuccess: true\n    };\n  }),\n\n  // Delete Log Reducers\n  on(todoActions.deleteLog, (state, {logid}) => ({...state, isLoading: true, deleteLogId: logid})),\n  on(todoActions.deleteLogSuccess, (state, result) => {\n    let logs = undefined !== state.logs ? _.cloneDeep(state.logs) : [];\n    if (result.status) {\n      logs = logs.filter(log => log.id !== state.deleteLogId);\n    }\n    return {\n      logs,\n      isLoading: false,\n      isLoadingSuccess: true\n    };\n  }),\n\n   // Edit Log Reducers\n   on(todoActions.editLog, (state, {log}) => ({...state, isLoading: true, currentLog: log})),\n   on(todoActions.editLogSuccess, (state, result) => {\n    let logs = undefined !== state.logs ? _.cloneDeep(state.logs) : [];\n    const currentLog = undefined !== state.currentLog ? _.cloneDeep(state.currentLog) : {};\n    logs = logs.map(tsk => {\n      if (tsk.id === currentLog.id) {\n        tsk = currentLog;\n      }\n      return tsk;\n    });\n    return {\n      logs,\n      isLoading: false,\n      isLoadingSuccess: true\n    };\n  })\n);\n\nexport function reducer(state: State | undefined, action: Action): any {\n  return todoReducer(state, action);\n}\n\nexport const getLogs = (state: State) => {\n  return {\n    logs: state.logs,\n    isLoading: state.isLoading,\n    isLoadingSuccess: state.isLoadingSuccess\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}