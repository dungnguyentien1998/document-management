{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { map, exhaustMap, catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as userActions from '../actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../_services/app.service\";\nexport class UserEffects {\n  constructor(actions$, appService) {\n    this.actions$ = actions$;\n    this.appService = appService;\n    this.userLogin$ = createEffect(() => this.actions$.pipe(ofType(userActions.login), exhaustMap(action => this.appService.login(action.user).pipe(map(response => userActions.loginSuccess(response)), catchError(error => of(userActions.loginFailure(error)))))));\n    this.userSignup$ = createEffect(() => this.actions$.pipe(ofType(userActions.signup), exhaustMap(action => this.appService.signup(action.user).pipe(map(response => userActions.signupSuccess(response)), catchError(error => of(userActions.signupFailure(error)))))));\n  }\n}\nUserEffects.ɵfac = function UserEffects_Factory(t) {\n  return new (t || UserEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AppService));\n};\nUserEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserEffects,\n  factory: UserEffects.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAASC,GAAG,EAAEC,UAAU,EAAEC,UAAU,QAAQ,gBAAgB;AAC5D,SAASC,EAAE,QAAQ,MAAM;AAEzB,OAAO,KAAKC,WAAW,MAAM,YAAY;;;;AAGzC,OAAM,MAAOC,WAAW;EAEtBC,YACUC,QAAiB,EACjBC,UAAsB;IADtB,aAAQ,GAARD,QAAQ;IACR,eAAU,GAAVC,UAAU;IAGpB,eAAU,GAAGV,YAAY,CAAC,MACxB,IAAI,CAACS,QAAQ,CAACE,IAAI,CAChBV,MAAM,CAACK,WAAW,CAACM,KAAK,CAAC,EACzBT,UAAU,CAACU,MAAM,IACf,IAAI,CAACH,UAAU,CAACE,KAAK,CAACC,MAAM,CAACC,IAAI,CAAC,CAACH,IAAI,CACrCT,GAAG,CAACa,QAAQ,IAAIT,WAAW,CAACU,YAAY,CAACD,QAAQ,CAAC,CAAC,EACnDX,UAAU,CAAEa,KAAU,IAAKZ,EAAE,CAACC,WAAW,CAACY,YAAY,CAACD,KAAK,CAAC,CAAC,CAAC,CAAC,CACnE,CACF,CACF;IAED,gBAAW,GAAGjB,YAAY,CAAC,MACzB,IAAI,CAACS,QAAQ,CAACE,IAAI,CAChBV,MAAM,CAACK,WAAW,CAACa,MAAM,CAAC,EAC1BhB,UAAU,CAACU,MAAM,IACf,IAAI,CAACH,UAAU,CAACS,MAAM,CAACN,MAAM,CAACC,IAAI,CAAC,CAACH,IAAI,CACtCT,GAAG,CAACa,QAAQ,IAAIT,WAAW,CAACc,aAAa,CAACL,QAAQ,CAAC,CAAC,EACpDX,UAAU,CAAEa,KAAU,IAAKZ,EAAE,CAACC,WAAW,CAACe,aAAa,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC,CACpE,CACF,CACF;EAtBE;;AALQV,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAe,SAAXf,WAAW;AAAA","names":["createEffect","ofType","map","exhaustMap","catchError","of","userActions","UserEffects","constructor","actions$","appService","pipe","login","action","user","response","loginSuccess","error","loginFailure","signup","signupSuccess","signupFailure","factory"],"sourceRoot":"","sources":["/Users/tiendung1998/Documents/Angular/document-management/src/app/app-state/effects/user.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { map, exhaustMap, catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { AppService } from '../../_services/app.service';\nimport * as userActions from '../actions';\n\n@Injectable()\nexport class UserEffects {\n\n  constructor(\n    private actions$: Actions,\n    private appService: AppService\n  ) {}\n\n  userLogin$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(userActions.login),\n      exhaustMap(action =>\n        this.appService.login(action.user).pipe(\n          map(response => userActions.loginSuccess(response)),\n          catchError((error: any) => of(userActions.loginFailure(error))))\n      )\n    )\n  );\n\n  userSignup$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(userActions.signup),\n      exhaustMap(action =>\n        this.appService.signup(action.user).pipe(\n          map(response => userActions.signupSuccess(response)),\n          catchError((error: any) => of(userActions.signupFailure(error))))\n      )\n    )\n  );\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}