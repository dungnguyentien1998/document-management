{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport * as todoActions from '../actions';\nimport * as _ from 'lodash';\nimport * as storage from '../state/storage';\nexport const initialState = {\n  requests: storage.getItem('todo').requests,\n  currentRequest: {},\n  deleteRequestId: '',\n  result: '',\n  isLoading: false,\n  isLoadingSuccess: false,\n  isLoadingFailure: false\n};\nconst todoReducer = createReducer(initialState,\n// Gerequests\non(todoActions.getRequests, state => ({\n  ...state,\n  isLoading: true\n})), on(todoActions.getRequestsSuccess, (state, result) => ({\n  requests: result.response,\n  isLoading: false,\n  isLoadingSuccess: true\n})),\n// Create Request Reducers\non(todoActions.createRequest, (state, {\n  request\n}) => ({\n  ...state,\n  isLoading: true,\n  currentRequest: request\n})), on(todoActions.createRequestSuccess, (state, result) => {\n  const requests = undefined !== state.requests ? _.cloneDeep(state.requests) : [];\n  const currentRequest = undefined !== state.currentRequest ? _.cloneDeep(state.currentRequest) : {};\n  currentRequest.id = result.requestId;\n  requests.push(currentRequest);\n  return {\n    requests,\n    isLoading: false,\n    isLoadingSuccess: true\n  };\n}),\n// Delete Request Reducers\non(todoActions.deleteRequest, (state, {\n  requestid\n}) => ({\n  ...state,\n  isLoading: true,\n  deleteRequestId: requestid\n})), on(todoActions.deleteRequestSuccess, (state, result) => {\n  let requests = undefined !== state.requests ? _.cloneDeep(state.requests) : [];\n  if (result.status) {\n    requests = requests.filter(request => request.id !== state.deleteRequestId);\n  }\n  return {\n    requests,\n    isLoading: false,\n    isLoadingSuccess: true\n  };\n}),\n// Edit Request Reducers\non(todoActions.editRequest, (state, {\n  request\n}) => ({\n  ...state,\n  isLoading: true,\n  currentRequest: request\n})), on(todoActions.editRequestSuccess, (state, result) => {\n  let requests = undefined !== state.requests ? _.cloneDeep(state.requests) : [];\n  const currentRequest = undefined !== state.currentRequest ? _.cloneDeep(state.currentRequest) : {};\n  requests = requests.map(tsk => {\n    if (tsk.id === currentRequest.id) {\n      tsk = currentRequest;\n    }\n    return tsk;\n  });\n  return {\n    requests,\n    isLoading: false,\n    isLoadingSuccess: true\n  };\n}));\nexport function reducer(state, action) {\n  return todoReducer(state, action);\n}\nexport const getRequests = state => {\n  return {\n    requests: state.requests,\n    isLoading: state.isLoading,\n    isLoadingSuccess: state.isLoadingSuccess\n  };\n};","map":{"version":3,"mappings":"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","names":["createReducer","on","todoActions","_","storage","initialState","requests","getItem","currentRequest","deleteRequestId","result","isLoading","isLoadingSuccess","isLoadingFailure","todoReducer","getRequests","state","getRequestsSuccess","response","createRequest","request","createRequestSuccess","undefined","cloneDeep","id","requestId","push","deleteRequest","requestid","deleteRequestSuccess","status","filter","editRequest","editRequestSuccess","map","tsk","reducer","action"],"sourceRoot":"","sources":["/Users/tiendung1998/Documents/Angular/document-management/src/app/app-state/reducers/request.reducer.ts"],"sourcesContent":["import { Action, createReducer, on } from '@ngrx/store';\nimport { Request } from '../entity';\nimport * as todoActions from '../actions';\nimport * as _ from 'lodash'\nimport * as storage from '../state/storage';\n\nexport interface State {\n  requests?: Request[];\n  currentRequest?: Request;\n  deleteRequestId?: any;\n  result?: any;\n  isLoading?: boolean;\n  isLoadingSuccess?: boolean;\n  isLoadingFailure?: boolean;\n}\n\nexport const initialState: State = {\n  requests: storage.getItem('todo').requests,\n  currentRequest: {},\n  deleteRequestId: '',\n  result: '',\n  isLoading: false,\n  isLoadingSuccess: false,\n  isLoadingFailure: false\n};\n\nconst todoReducer = createReducer(\n  initialState,\n\n  // Gerequests\n  on(todoActions.getRequests, (state) => ({...state, isLoading: true})),\n  on(todoActions.getRequestsSuccess, (state, result) => ({requests: result.response, isLoading: false, isLoadingSuccess: true})),\n\n  // Create Request Reducers\n  on(todoActions.createRequest, (state, {request}) => ({...state, isLoading: true, currentRequest: request})),\n  on(todoActions.createRequestSuccess, (state, result) => {\n    const requests = undefined !== state.requests ? _.cloneDeep(state.requests) : [];\n    const currentRequest = undefined !== state.currentRequest ? _.cloneDeep(state.currentRequest) : {};\n    currentRequest.id = result.requestId;\n    requests.push(currentRequest);\n    return {\n      requests,\n      isLoading: false,\n      isLoadingSuccess: true\n    };\n  }),\n\n  // Delete Request Reducers\n  on(todoActions.deleteRequest, (state, {requestid}) => ({...state, isLoading: true, deleteRequestId: requestid})),\n  on(todoActions.deleteRequestSuccess, (state, result) => {\n    let requests = undefined !== state.requests ? _.cloneDeep(state.requests) : [];\n    if (result.status) {\n      requests = requests.filter(request => request.id !== state.deleteRequestId);\n    }\n    return {\n      requests,\n      isLoading: false,\n      isLoadingSuccess: true\n    };\n  }),\n\n   // Edit Request Reducers\n   on(todoActions.editRequest, (state, {request}) => ({...state, isLoading: true, currentRequest: request})),\n   on(todoActions.editRequestSuccess, (state, result) => {\n    let requests = undefined !== state.requests ? _.cloneDeep(state.requests) : [];\n    const currentRequest = undefined !== state.currentRequest ? _.cloneDeep(state.currentRequest) : {};\n    requests = requests.map(tsk => {\n      if (tsk.id === currentRequest.id) {\n        tsk = currentRequest;\n      }\n      return tsk;\n    });\n    return {\n      requests,\n      isLoading: false,\n      isLoadingSuccess: true\n    };\n  })\n);\n\nexport function reducer(state: State | undefined, action: Action): any {\n  return todoReducer(state, action);\n}\n\nexport const getRequests = (state: State) => {\n  return {\n    requests: state.requests,\n    isLoading: state.isLoading,\n    isLoadingSuccess: state.isLoadingSuccess\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}