{"ast":null,"code":"import { DOCUMENT } from '@angular/common';\nimport { EventEmitter } from '@angular/core';\nimport { filter, fromEvent } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ClickOutsideDirective {\n  constructor(element, document) {\n    this.element = element;\n    this.document = document;\n    this.clickOutside = new EventEmitter();\n  }\n  ngAfterViewInit() {\n    this.documentClickSubscription = fromEvent(this.document, 'click').pipe(filter(event => {\n      return !this.isInside(event.target);\n    })).subscribe(() => {\n      this.clickOutside.emit();\n    });\n  }\n  ngOnDestroy() {\n    this.documentClickSubscription?.unsubscribe();\n  }\n  isInside(elementToCheck) {\n    return elementToCheck === this.element.nativeElement || this.element.nativeElement.contains(elementToCheck);\n  }\n}\nClickOutsideDirective.ɵfac = function ClickOutsideDirective_Factory(t) {\n  return new (t || ClickOutsideDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DOCUMENT));\n};\nClickOutsideDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: ClickOutsideDirective,\n  selectors: [[\"\", \"clickOutside\", \"\"]],\n  outputs: {\n    clickOutside: \"clickOutside\"\n  }\n});","map":{"version":3,"mappings":"AAAA,SAASA,QAAQ,QAAQ,iBAAiB;AAC1C,SAA+CC,YAAY,QAAmC,eAAe;AAC7G,SAASC,MAAM,EAAEC,SAAS,QAAsB,MAAM;;AAKtD,OAAM,MAAOC,qBAAqB;EAKhCC,YAAoBC,OAAmB,EAA4BC,QAAkB;IAAjE,YAAO,GAAPD,OAAO;IAAwC,aAAQ,GAARC,QAAQ;IAJjE,iBAAY,GAAG,IAAIN,YAAY,EAAQ;EAIuC;EAExFO,eAAe;IACb,IAAI,CAACC,yBAAyB,GAAGN,SAAS,CAAC,IAAI,CAACI,QAAQ,EAAE,OAAO,CAAC,CAC/DG,IAAI,CACHR,MAAM,CAAES,KAAK,IAAI;MACf,OAAO,CAAC,IAAI,CAACC,QAAQ,CAACD,KAAK,CAACE,MAAqB,CAAC;IACpD,CAAC,CAAC,CACH,CACAC,SAAS,CAAC,MAAK;MACd,IAAI,CAACC,YAAY,CAACC,IAAI,EAAE;IAC1B,CAAC,CAAC;EACN;EAEAC,WAAW;IACT,IAAI,CAACR,yBAAyB,EAAES,WAAW,EAAE;EAC/C;EAEAN,QAAQ,CAACO,cAA2B;IAClC,OAAOA,cAAc,KAAK,IAAI,CAACb,OAAO,CAACc,aAAa,IAAI,IAAI,CAACd,OAAO,CAACc,aAAa,CAACC,QAAQ,CAACF,cAAc,CAAC;EAC7G;;AAzBWf,qBAAqB;mBAArBA,qBAAqB,4DAKiBJ,QAAQ;AAAA;AAL9CI,qBAAqB;QAArBA,qBAAqB;EAAAkB;EAAAC;IAAAR;EAAA;AAAA","names":["DOCUMENT","EventEmitter","filter","fromEvent","ClickOutsideDirective","constructor","element","document","ngAfterViewInit","documentClickSubscription","pipe","event","isInside","target","subscribe","clickOutside","emit","ngOnDestroy","unsubscribe","elementToCheck","nativeElement","contains","selectors","outputs"],"sourceRoot":"","sources":["/Users/tiendung1998/Documents/Angular/document-management/src/app/shared/directives/click-outside.directive.ts"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport { AfterViewInit, Directive, ElementRef, EventEmitter, Inject, OnDestroy, Output } from '@angular/core';\nimport { filter, fromEvent, Subscription } from 'rxjs';\n\n@Directive({\n  selector: '[clickOutside]',\n})\nexport class ClickOutsideDirective implements AfterViewInit, OnDestroy {\n  @Output() clickOutside = new EventEmitter<void>();\n\n  documentClickSubscription: Subscription | undefined;\n\n  constructor(private element: ElementRef, @Inject(DOCUMENT) private document: Document) {}\n\n  ngAfterViewInit(): void {\n    this.documentClickSubscription = fromEvent(this.document, 'click')\n      .pipe(\n        filter((event) => {\n          return !this.isInside(event.target as HTMLElement);\n        }),\n      )\n      .subscribe(() => {\n        this.clickOutside.emit();\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.documentClickSubscription?.unsubscribe();\n  }\n\n  isInside(elementToCheck: HTMLElement): boolean {\n    return elementToCheck === this.element.nativeElement || this.element.nativeElement.contains(elementToCheck);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}