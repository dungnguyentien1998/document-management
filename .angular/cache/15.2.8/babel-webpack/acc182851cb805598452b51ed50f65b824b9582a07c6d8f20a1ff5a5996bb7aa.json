{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport * as userActions from '../actions';\nimport * as storage from '../state/storage';\nexport const initialState = {\n  user: storage.getItem('user').user,\n  result: '',\n  isLoading: false,\n  isLoadingSuccess: false,\n  isLoadingFailure: false\n};\nconst loginReducer = createReducer(initialState, on(userActions.login, (state, {\n  user\n}) => ({\n  ...state,\n  user,\n  isLoading: true,\n  isLoadingFailure: false\n})), on(userActions.loginSuccess, (state, result) => ({\n  ...state,\n  user: result.user,\n  result,\n  isLoading: false,\n  isLoadingSuccess: true\n})), on(userActions.signup, (state, {\n  user\n}) => ({\n  ...state,\n  user,\n  isLoading: true\n})), on(userActions.signupSuccess, (state, result) => ({\n  ...state,\n  user: state.user,\n  result,\n  isLoading: false,\n  isLoadingSuccess: true\n})));\nexport function reducer(state, action) {\n  return loginReducer(state, action);\n}\nexport const getLoggedInUser = state => {\n  return {\n    user: state.user,\n    isLoadingSuccess: state.isLoadingSuccess\n  };\n};\nexport const userLogin = state => {\n  return {\n    user: state.user,\n    result: state.result,\n    isLoading: state.isLoading,\n    isLoadingSuccess: state.isLoadingSuccess\n  };\n};\nexport const userSignup = state => {\n  return {\n    user: state.user,\n    result: state.result,\n    isLoading: state.isLoading,\n    isLoadingSuccess: state.isLoadingSuccess\n  };\n};","map":{"version":3,"mappings":"AAAA,SAAiBA,aAAa,EAAEC,EAAE,QAAQ,aAAa;AAEvD,OAAO,KAAKC,WAAW,MAAM,YAAY;AACzC,OAAO,KAAKC,OAAO,MAAM,kBAAkB;AAU3C,OAAO,MAAMC,YAAY,GAAU;EACjCC,IAAI,EAAEF,OAAO,CAACG,OAAO,CAAC,MAAM,CAAC,CAACD,IAAI;EAClCE,MAAM,EAAE,EAAE;EACVC,SAAS,EAAE,KAAK;EAChBC,gBAAgB,EAAE,KAAK;EACvBC,gBAAgB,EAAE;CACnB;AAED,MAAMC,YAAY,GAAGX,aAAa,CAChCI,YAAY,EACZH,EAAE,CAACC,WAAW,CAACU,KAAK,EAAE,CAACC,KAAK,EAAE;EAACR;AAAI,CAAC,MAAM;EAAC,GAAGQ,KAAK;EAAER,IAAI;EAAEG,SAAS,EAAE,IAAI;EAAEE,gBAAgB,EAAE;AAAK,CAAC,CAAC,CAAC,EACtGT,EAAE,CAACC,WAAW,CAACY,YAAY,EAAE,CAACD,KAAK,EAAEN,MAAM,MAAM;EAAC,GAAGM,KAAK;EAAER,IAAI,EAAEE,MAAM,CAACF,IAAI;EAAEE,MAAM;EAAEC,SAAS,EAAE,KAAK;EAAEC,gBAAgB,EAAE;AAAI,CAAC,CAAC,CAAC,EAClIR,EAAE,CAACC,WAAW,CAACa,MAAM,EAAE,CAACF,KAAK,EAAE;EAACR;AAAI,CAAC,MAAM;EAAC,GAAGQ,KAAK;EAAER,IAAI;EAAEG,SAAS,EAAE;AAAI,CAAC,CAAC,CAAC,EAC9EP,EAAE,CAACC,WAAW,CAACc,aAAa,EAAE,CAACH,KAAK,EAAEN,MAAM,MAAM;EAAC,GAAGM,KAAK;EAAER,IAAI,EAAEQ,KAAK,CAACR,IAAI;EAAEE,MAAM;EAAEC,SAAS,EAAE,KAAK;EAAEC,gBAAgB,EAAE;AAAI,CAAC,CAAC,CAAC,CACnI;AAED,OAAM,SAAUQ,OAAO,CAACJ,KAAwB,EAAEK,MAAc;EAC9D,OAAOP,YAAY,CAACE,KAAK,EAAEK,MAAM,CAAC;AACpC;AAEA,OAAO,MAAMC,eAAe,GAAIN,KAAY,IAAI;EAC9C,OAAO;IACLR,IAAI,EAAEQ,KAAK,CAACR,IAAI;IAChBI,gBAAgB,EAAEI,KAAK,CAACJ;GACzB;AACH,CAAC;AAED,OAAO,MAAMW,SAAS,GAAIP,KAAY,IAAI;EACxC,OAAO;IACLR,IAAI,EAAEQ,KAAK,CAACR,IAAI;IAChBE,MAAM,EAAEM,KAAK,CAACN,MAAM;IACpBC,SAAS,EAAEK,KAAK,CAACL,SAAS;IAC1BC,gBAAgB,EAAEI,KAAK,CAACJ;GACzB;AACH,CAAC;AAED,OAAO,MAAMY,UAAU,GAAIR,KAAY,IAAI;EACzC,OAAO;IACLR,IAAI,EAAEQ,KAAK,CAACR,IAAI;IAChBE,MAAM,EAAEM,KAAK,CAACN,MAAM;IACpBC,SAAS,EAAEK,KAAK,CAACL,SAAS;IAC1BC,gBAAgB,EAAEI,KAAK,CAACJ;GACzB;AACH,CAAC","names":["createReducer","on","userActions","storage","initialState","user","getItem","result","isLoading","isLoadingSuccess","isLoadingFailure","loginReducer","login","state","loginSuccess","signup","signupSuccess","reducer","action","getLoggedInUser","userLogin","userSignup"],"sourceRoot":"","sources":["/Users/tiendung1998/Documents/Angular/document-management/src/app/app-state/reducers/user.reducer.ts"],"sourcesContent":["import { Action, createReducer, on } from '@ngrx/store';\nimport { User } from '../entity';\nimport * as userActions from '../actions';\nimport * as storage from '../state/storage';\n\nexport interface State {\n  user: User;\n  result: any;\n  isLoading: boolean;\n  isLoadingSuccess: boolean;\n  isLoadingFailure: boolean;\n}\n\nexport const initialState: State = {\n  user: storage.getItem('user').user,\n  result: '',\n  isLoading: false,\n  isLoadingSuccess: false,\n  isLoadingFailure: false\n};\n\nconst loginReducer = createReducer(\n  initialState,\n  on(userActions.login, (state, {user}) => ({...state, user, isLoading: true, isLoadingFailure: false})),\n  on(userActions.loginSuccess, (state, result) => ({...state, user: result.user, result, isLoading: false, isLoadingSuccess: true})),\n  on(userActions.signup, (state, {user}) => ({...state, user, isLoading: true})),\n  on(userActions.signupSuccess, (state, result) => ({...state, user: state.user, result, isLoading: false, isLoadingSuccess: true}))\n);\n\nexport function reducer(state: State | undefined, action: Action): any {\n  return loginReducer(state, action);\n}\n\nexport const getLoggedInUser = (state: State) => {\n  return {\n    user: state.user,\n    isLoadingSuccess: state.isLoadingSuccess\n  }\n};\n\nexport const userLogin = (state: State) => {\n  return {\n    user: state.user,\n    result: state.result,\n    isLoading: state.isLoading,\n    isLoadingSuccess: state.isLoadingSuccess\n  }\n};\n\nexport const userSignup = (state: State) => {\n  return {\n    user: state.user,\n    result: state.result,\n    isLoading: state.isLoading,\n    isLoadingSuccess: state.isLoadingSuccess\n  }\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}