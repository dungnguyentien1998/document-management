{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, exhaustMap, catchError } from 'rxjs/operators';\nimport * as todoActions from '../actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../_services\";\nexport class TodoEffects {\n  constructor(actions$, todoService) {\n    this.actions$ = actions$;\n    this.todoService = todoService;\n    this.getReports$ = createEffect(() => this.actions$.pipe(ofType(todoActions.getReports), exhaustMap(action => this.todoService.getReports().pipe(map(response => {\n      console.log(\"response:::\", response);\n      return todoActions.getReportsSuccess({\n        response\n      });\n    }), catchError(error => of(todoActions.getReportsFailure(error)))))));\n    this.createReport$ = createEffect(() => this.actions$.pipe(ofType(todoActions.createReport), exhaustMap(action => this.todoService.addReport(action.report).pipe(map(response => todoActions.createReportSuccess(response)), catchError(error => of(todoActions.createReportFailure(error)))))));\n    this.deleteReport$ = createEffect(() => this.actions$.pipe(ofType(todoActions.deleteReport), exhaustMap(action => this.todoService.deleteReport(action.reportid).pipe(map(response => todoActions.deleteReportSuccess(response)), catchError(error => of(todoActions.deleteReportFailure(error)))))));\n    this.editReport$ = createEffect(() => this.actions$.pipe(ofType(todoActions.editReport), exhaustMap(action => this.todoService.editReport(action.report).pipe(map(response => todoActions.editReportSuccess(response)), catchError(error => of(todoActions.editReportFailure(error)))))));\n  }\n}\nTodoEffects.ɵfac = function TodoEffects_Factory(t) {\n  return new (t || TodoEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.TodoService));\n};\nTodoEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TodoEffects,\n  factory: TodoEffects.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAASC,EAAE,QAAQ,MAAM;AACzB,SAASC,GAAG,EAAEC,UAAU,EAAEC,UAAU,QAAQ,gBAAgB;AAE5D,OAAO,KAAKC,WAAW,MAAM,YAAY;;;;AAGzC,OAAM,MAAOC,WAAW;EAEtBC,YACUC,QAAiB,EACjBC,WAAwB;IADxB,aAAQ,GAARD,QAAQ;IACR,gBAAW,GAAXC,WAAW;IAGrB,gBAAW,GAAGV,YAAY,CAAC,MACzB,IAAI,CAACS,QAAQ,CAACE,IAAI,CAChBV,MAAM,CAACK,WAAW,CAACM,UAAU,CAAC,EAC9BR,UAAU,CAACS,MAAM,IACf,IAAI,CAACH,WAAW,CAACE,UAAU,EAAE,CAACD,IAAI,CAChCR,GAAG,CAACW,QAAQ,IAAG;MACbC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,QAAQ,CAAC;MACpC,OAAOR,WAAW,CAACW,iBAAiB,CAAC;QAACH;MAAQ,CAAC,CAAC;IAClD,CAAC,CAAC,EACFT,UAAU,CAAEa,KAAU,IAAKhB,EAAE,CAACI,WAAW,CAACa,iBAAiB,CAACD,KAAK,CAAC,CAAC,CAAC,CAAC,CACxE,CACF,CACF;IAED,kBAAa,GAAGlB,YAAY,CAAC,MAC3B,IAAI,CAACS,QAAQ,CAACE,IAAI,CAChBV,MAAM,CAACK,WAAW,CAACc,YAAY,CAAC,EAChChB,UAAU,CAACS,MAAM,IACf,IAAI,CAACH,WAAW,CAACW,SAAS,CAACR,MAAM,CAACS,MAAM,CAAC,CAACX,IAAI,CAC5CR,GAAG,CAACW,QAAQ,IAAIR,WAAW,CAACiB,mBAAmB,CAACT,QAAQ,CAAC,CAAC,EAC1DT,UAAU,CAAEa,KAAU,IAAKhB,EAAE,CAACI,WAAW,CAACkB,mBAAmB,CAACN,KAAK,CAAC,CAAC,CAAC,CAAC,CAC1E,CACF,CACF;IAGD,kBAAa,GAAGlB,YAAY,CAAC,MAC3B,IAAI,CAACS,QAAQ,CAACE,IAAI,CAChBV,MAAM,CAACK,WAAW,CAACmB,YAAY,CAAC,EAChCrB,UAAU,CAACS,MAAM,IAAI,IAAI,CAACH,WAAW,CAACe,YAAY,CAACZ,MAAM,CAACa,QAAQ,CAAC,CAACf,IAAI,CACpER,GAAG,CAACW,QAAQ,IAAIR,WAAW,CAACqB,mBAAmB,CAACb,QAAQ,CAAC,CAAC,EAC1DT,UAAU,CAAEa,KAAU,IAAKhB,EAAE,CAACI,WAAW,CAACsB,mBAAmB,CAACV,KAAK,CAAC,CAAC,CAAC,CAAC,CAC1E,CACF,CACF;IAED,gBAAW,GAAGlB,YAAY,CAAC,MACzB,IAAI,CAACS,QAAQ,CAACE,IAAI,CAChBV,MAAM,CAACK,WAAW,CAACuB,UAAU,CAAC,EAC9BzB,UAAU,CAACS,MAAM,IACf,IAAI,CAACH,WAAW,CAACmB,UAAU,CAAChB,MAAM,CAACS,MAAM,CAAC,CAACX,IAAI,CAC7CR,GAAG,CAACW,QAAQ,IAAIR,WAAW,CAACwB,iBAAiB,CAAChB,QAAQ,CAAC,CAAC,EACxDT,UAAU,CAAEa,KAAU,IAAKhB,EAAE,CAACI,WAAW,CAACyB,iBAAiB,CAACb,KAAK,CAAC,CAAC,CAAC,CAAC,CACxE,CACF,CACF;EA/CE;;AALQX,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAyB,SAAXzB,WAAW;AAAA","names":["createEffect","ofType","of","map","exhaustMap","catchError","todoActions","TodoEffects","constructor","actions$","todoService","pipe","getReports","action","response","console","log","getReportsSuccess","error","getReportsFailure","createReport","addReport","report","createReportSuccess","createReportFailure","deleteReport","reportid","deleteReportSuccess","deleteReportFailure","editReport","editReportSuccess","editReportFailure","factory"],"sourceRoot":"","sources":["/Users/tiendung1998/Documents/Angular/document-management/src/app/app-state/effects/todo.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, exhaustMap, catchError } from 'rxjs/operators';\nimport { TodoService } from '../../_services';\nimport * as todoActions from '../actions';\n\n@Injectable()\nexport class TodoEffects {\n\n  constructor(\n    private actions$: Actions,\n    private todoService: TodoService\n  ) {}\n\n  getReports$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(todoActions.getReports),\n      exhaustMap(action =>\n        this.todoService.getReports().pipe(\n          map(response => {\n            console.log(\"response:::\", response)\n            return todoActions.getReportsSuccess({response})\n          }),\n          catchError((error: any) => of(todoActions.getReportsFailure(error))))\n      )\n    )\n  );\n\n  createReport$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(todoActions.createReport),\n      exhaustMap(action =>\n        this.todoService.addReport(action.report).pipe(\n          map(response => todoActions.createReportSuccess(response)),\n          catchError((error: any) => of(todoActions.createReportFailure(error))))\n      )\n    )\n  );\n\n\n  deleteReport$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(todoActions.deleteReport),\n      exhaustMap(action => this.todoService.deleteReport(action.reportid).pipe(\n          map(response => todoActions.deleteReportSuccess(response)),\n          catchError((error: any) => of(todoActions.deleteReportFailure(error))))\n      )\n    )\n  );\n\n  editReport$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(todoActions.editReport),\n      exhaustMap(action =>\n        this.todoService.editReport(action.report).pipe(\n          map(response => todoActions.editReportSuccess(response)),\n          catchError((error: any) => of(todoActions.editReportFailure(error))))\n      )\n    )\n  );\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}