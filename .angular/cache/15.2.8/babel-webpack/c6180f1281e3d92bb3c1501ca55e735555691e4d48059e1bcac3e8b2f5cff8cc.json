{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, exhaustMap, catchError } from 'rxjs/operators';\nimport * as todoActions from '../actions';\nimport { saveAs } from 'file-saver';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../_services\";\nexport class TodoEffects {\n  constructor(actions$, todoService) {\n    this.actions$ = actions$;\n    this.todoService = todoService;\n    this.getReports$ = createEffect(() => this.actions$.pipe(ofType(todoActions.getReports), exhaustMap(action => this.todoService.getReports().pipe(map(response => {\n      console.log(\"response:::\", response);\n      return todoActions.getReportsSuccess({\n        response\n      });\n    }), catchError(error => of(todoActions.getReportsFailure(error)))))));\n    this.createReport$ = createEffect(() => this.actions$.pipe(ofType(todoActions.createReport), exhaustMap(action => this.todoService.addReport(action.report).pipe(map(response => {\n      console.log(\"Start\");\n      let blob = new Blob([response], {\n        type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n      });\n      const url = window.URL.createObjectURL(blob);\n      saveAs(blob, 'file.docx');\n      console.log(\"End\");\n      return todoActions.createReportSuccess(response);\n    }), catchError(error => {\n      console.log(\"Error: \", error);\n      return of(todoActions.createReportFailure(error));\n    })))));\n    this.deleteReport$ = createEffect(() => this.actions$.pipe(ofType(todoActions.deleteReport), exhaustMap(action => this.todoService.deleteReport(action.reportid).pipe(map(response => todoActions.deleteReportSuccess(response)), catchError(error => of(todoActions.deleteReportFailure(error)))))));\n    this.editReport$ = createEffect(() => this.actions$.pipe(ofType(todoActions.editReport), exhaustMap(action => this.todoService.editReport(action.report).pipe(map(response => todoActions.editReportSuccess(response)), catchError(error => of(todoActions.editReportFailure(error)))))));\n  }\n}\nTodoEffects.ɵfac = function TodoEffects_Factory(t) {\n  return new (t || TodoEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.TodoService));\n};\nTodoEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TodoEffects,\n  factory: TodoEffects.ɵfac\n});","map":{"version":3,"mappings":"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","names":["createEffect","ofType","of","map","exhaustMap","catchError","todoActions","saveAs","TodoEffects","constructor","actions$","todoService","pipe","getReports","action","response","console","log","getReportsSuccess","error","getReportsFailure","createReport","addReport","report","blob","Blob","type","url","window","URL","createObjectURL","createReportSuccess","createReportFailure","deleteReport","reportid","deleteReportSuccess","deleteReportFailure","editReport","editReportSuccess","editReportFailure","factory"],"sourceRoot":"","sources":["/Users/tiendung1998/Documents/Angular/document-management/src/app/app-state/effects/report.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, exhaustMap, catchError } from 'rxjs/operators';\nimport { TodoService } from '../../_services';\nimport * as todoActions from '../actions';\nimport {saveAs} from 'file-saver';\n\n@Injectable()\nexport class TodoEffects {\n\n  constructor(\n    private actions$: Actions,\n    private todoService: TodoService\n  ) {}\n\n  getReports$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(todoActions.getReports),\n      exhaustMap(action =>\n        this.todoService.getReports().pipe(\n          map(response => {\n            console.log(\"response:::\", response)\n            return todoActions.getReportsSuccess({response})\n          }),\n          catchError((error: any) => of(todoActions.getReportsFailure(error))))\n      )\n    )\n  );\n\n  createReport$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(todoActions.createReport),\n      exhaustMap(action =>\n        this.todoService.addReport(action.report).pipe(\n          map(response => {\n            console.log(\"Start\");\n            let blob:any = new Blob([response], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' })\n            const url = window.URL.createObjectURL(blob);\n            saveAs(blob, 'file.docx')\n            console.log(\"End\");\n\n            return todoActions.createReportSuccess(response)\n          }),\n          catchError((error: any) => {\n            console.log(\"Error: \", error);\n            return of(todoActions.createReportFailure(error))\n          }))\n      )\n    )\n  );\n\n\n  deleteReport$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(todoActions.deleteReport),\n      exhaustMap(action => this.todoService.deleteReport(action.reportid).pipe(\n          map(response => todoActions.deleteReportSuccess(response)),\n          catchError((error: any) => of(todoActions.deleteReportFailure(error))))\n      )\n    )\n  );\n\n  editReport$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(todoActions.editReport),\n      exhaustMap(action =>\n        this.todoService.editReport(action.report).pipe(\n          map(response => todoActions.editReportSuccess(response)),\n          catchError((error: any) => of(todoActions.editReportFailure(error))))\n      )\n    )\n  );\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}