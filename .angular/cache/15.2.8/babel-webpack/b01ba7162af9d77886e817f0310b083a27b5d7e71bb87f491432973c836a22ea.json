{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ThemeService {\n  constructor() {\n    this.default = 'light';\n    this.themeChanged = new BehaviorSubject(this.theme);\n  }\n  get theme() {\n    return localStorage.getItem('theme') ?? this.default;\n  }\n  set theme(value) {\n    localStorage.setItem('theme', value);\n    this.themeChanged.next(value);\n  }\n  get isDark() {\n    return this.theme == 'dark';\n  }\n}\nThemeService.ɵfac = function ThemeService_Factory(t) {\n  return new (t || ThemeService)();\n};\nThemeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ThemeService,\n  factory: ThemeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAKtC,OAAM,MAAOC,YAAY;EAIvBC;IAHO,YAAO,GAAG,OAAO;IACjB,iBAAY,GAA4B,IAAIF,eAAe,CAAC,IAAI,CAACG,KAAK,CAAC;EAE/D;EAEf,IAAWA,KAAK;IACd,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAACC,OAAO;EACtD;EAEA,IAAWH,KAAK,CAACI,KAAa;IAC5BH,YAAY,CAACI,OAAO,CAAC,OAAO,EAAED,KAAK,CAAC;IACpC,IAAI,CAACE,YAAY,CAACC,IAAI,CAACH,KAAK,CAAC;EAC/B;EAEA,IAAWI,MAAM;IACf,OAAO,IAAI,CAACR,KAAK,IAAI,MAAM;EAC7B;;AAjBWF,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAW,SAAZX,YAAY;EAAAY,YAFX;AAAM","names":["BehaviorSubject","ThemeService","constructor","theme","localStorage","getItem","default","value","setItem","themeChanged","next","isDark","factory","providedIn"],"sourceRoot":"","sources":["/Users/tiendung1998/Documents/Angular/document-management/src/app/core/services/theme.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemeService {\n  public default = 'light';\n  public themeChanged: BehaviorSubject<string> = new BehaviorSubject(this.theme);\n\n  constructor() {}\n\n  public get theme(): string {\n    return localStorage.getItem('theme') ?? this.default;\n  }\n\n  public set theme(value: string) {\n    localStorage.setItem('theme', value);\n    this.themeChanged.next(value);\n  }\n\n  public get isDark(): boolean {\n    return this.theme == 'dark';\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}